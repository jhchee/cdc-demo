name: cdc-demo

services:
  broker:
    image: confluentinc/cp-kafka:7.5.3
    networks:
      - cdc-demo-network
    hostname: broker
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      # Endpoints
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      # Replications
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # JMX
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # Kraft
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      # Misc
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.1
    networks:
      - cdc-demo-network
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - '8081:8081'
    depends_on:
      broker:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  kafka-ui:
    image: provectuslabs/kafka-ui:8f2a29d15ddbcb49675fef0e81cebc42cf2bebf3
    networks:
      - cdc-demo-network
    ports:
      - '9090:8080'
    depends_on:
      - broker
      - schema-registry
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM: PLAIN
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081

  postgres:
    build:
      context: postgres/
      dockerfile: postgres.Dockerfile
    networks:
      - cdc-demo-network
    hostname: postgres
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'password'
    ports:
      - "5432:5432"

  debezium:
    image: debezium/connect:2.7
    hostname: debezium
    ports:
      - "8083:8083"
    networks:
      - cdc-demo-network
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_configs
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_statuses
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PRODUCER_INTERCEPTORS: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      CONNECT_CONSUMER_INTERCEPTORS: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      CONNECT_REST_ADVERTISED_HOST_NAME: "debezium"
      CONNECT_PLUGIN_PATH: "/kafka/connect,/usr/share/java"
    depends_on:
      - broker
      - postgres

  debezium-ui:
    image: debezium/debezium-ui:2.5
    hostname: debezium-ui
    ports:
      - "8082:8080"
    networks:
      - cdc-demo-network
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083

networks:
  cdc-demo-network: